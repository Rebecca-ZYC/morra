import {loadStdlib, ask} from "@reach-sh/stdlib";
import * as backend from './build/index.main.mjs';
const stdlib = loadStdlib();

const isAlice = await ask.ask(
    `Are you Alice?`,
    ask.yesno
);

const who = isAlice ? 'Alice' : 'Bob';

console.log(`Starting Morra as ${who}`);

let acc=null;
const creatAcc = await ask.ask(
    `Would you like to creat an account?()`,
    ask.yesno
);

if(creatAcc){
    acc=await stdlib.newTestAccount(stdlib.parseCurrency(1000));
}else{
    const secret = await ask.ask(
        `what is your account secret?`,
        (x => x)
    );
    acc = await stdlib.newAccountFromSecret(secret);
}

let ctc = null;

if(isAlice){
    ctc = acc.contract(backend);
    ctc.getInfo().then((info) =>{
        console.log(`The contract is deployed as =${JSON.stringify(info)}`);

    }) 
}else{
    const info = await ask.ask(
        `Please paste the contract information: `,
        JSON.parse
    );
    ctc = acc.contract(backend, info)
}

const fmt = (x) => stdlib.formatCurrency(x,4);
const getBalance = async() => fmt(await stdlib.balanceOf(acc));

const before = await getBalance();
console.log(`Your balance is ${before}`);

const interact = { ...stdlib.hasRandom};

interact.informTimeout = () =>{
    console.log(`there was a timeout. `);
    process.exit(1);
};

if(isAlice){
    const amt = await ask.ask(
        `how much do you want to wager?`,
        stdlib.parseCurrency
    );
    interact.wager = amt;
    interact.deadline = { ETH: 100, ALGO: 100, CFX: 1000 }[stdlib.connector];
} else{
    
    interact.acceptWager = async (amt) => {
        const accepted = await ask.ask(
            `Do you accept the wager of ${fmt(amt)}?`,
            ask.yesno
        );
        if(!accepted){
            process.exit(0);
        }
    };
}

////
const FINGERS = [0, 1, 2, 3, 4, 5];
const GUESS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; 
const OUTCOME = ['Bob wins', 'Draw', 'Alice wins'];



////
interact.getFingers = async() => {
    const finger = await ask.ask(`how many fingers will you play(0-5)?`, (x) =>{
        const finger2 = FINGERS[x];
        if (finger2 === undefined){
            throw Error(`Not a valid hand ${finger2}`);
        }
        return finger2
    });
    console.log(`Your played ${FINGERS[finger]}`);
    return finger;
};



interact.getGuess = async() => {
    const guess = await ask.ask(`how many fingers will you guess(0-10)?`, (x) =>{
        const guess2 = GUESS[x];
        if (guess2 === undefined){
            throw Error(`Not a valid number ${guess2}`);
        }
        return guess2
    });
    console.log(`Your played ${GUESS[guess]}`);
    return guess;
};


interact.seeWinning = (fingerA, fingerB) =>{
    const winningNum = stdlib.bigNumberToNumber(fingerA) + stdlib.bigNumberToNumber(fingerB);
    console.log(`The Winning Number is ${winningNum}`);
};

interact.seeOutcome = (outcome) => {
    console.log(`The coutcome is: ${OUTCOME[outcome]}`);
};

const part = isAlice ? ctc.p.Alice: ctc.p.Bob;

await part(interact);

const after = await getBalance();
console.log(`your balance is now ${after}`);


ask.done();